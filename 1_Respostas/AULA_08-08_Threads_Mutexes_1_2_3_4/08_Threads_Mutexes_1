GABRIELA CONCEIÇÃO DOS SANTOS. - 16/0152038 - 2/2018


1. Quais são as vantagens e desvantagens em utilizar:
(a) fork?

  RESPOSTA: Cada um executa individualmente o programa sem necessáriamente depender do outro, mas não há um conpartilhamento de dados tão fácil

(b) threads?

   RESPOSTA: As variáveis são compartilhadas, mas sa função principal for encerrada todos os threads também serão.


2. Quantas threads serão criadas após as linhas de código a seguir? Quantas coexistirão? Por quê?
(a)

void* funcao_thread_1(void *arg);
void* funcao_thread_2(void *arg);

int main (int argc, char** argv)
{
	pthread_t t1, t2;
	pthread_create(&t1, NULL, funcao_thread_1, NULL);
	pthread_create(&t2, NULL, funcao_thread_2, NULL);
	pthread_join(t1, NULL);
	pthread_join(t2, NULL);
	return 0;
}
 RESPOSTA: Serão criadas duas threads e elas duas coexistirão até o programa for finalizado ou uma delas parar.

(b)

void* funcao_thread_1(void *arg);
void* funcao_thread_2(void *arg);

int main (int argc, char** argv)
{
	pthread_t t1, t2;
	pthread_create(&t1, NULL, funcao_thread_1, NULL);
	pthread_join(t1, NULL);
	pthread_create(&t2, NULL, funcao_thread_2, NULL);
	pthread_join(t2, NULL);
	return 0;
}
 RESPOSTA: São criadas duas threads, porém a funcao_thread_2 só será executada após a funcao_thread_1 terminar de ser executado.


3. Apresente as características e utilidades das seguintes funções:
(a) pthread_setcancelstate()

   RESPOSTA: O estado de cancelamento pode ser ativado(padrão) ou desativado. Caso esteja desativado, o cancelamento fica na fila até que o cancelamento estava em ativado. Caso estaja ativado, então o tipo de cancelamento determina quando o cancelamento vai ocorrer

(b) pthread_setcanceltype()

  RESPOSTA: O tipo de cancelamento pode ser tanto assincrono quanto adiado(padrão). Quando está em assíncrono, o cancelamento pode ocorrer a qualquer momento. Quando está em adiado, o cancelamento sofrerá um atraso até a thread em seguida chame uma função que seja o ponto de cancelamento.

(DICA: elas são relacionadas à função pthread_cancel().)
